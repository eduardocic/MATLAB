%% File : main.tlc
%% Created: Tue Sep 25 11:09:59 2018
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "main.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  main "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign hFileName = "main_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #include "tmwtypes.h"
    extern void main_Outputs_wrapper_accel(const void *In, void *__InBUS,
                          real_T *Out);
    #endif
    %closefile hFile

    %assign cFileName = "main_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "main_bus.h"
	void main_Outputs_wrapper_accel(const void *In, void *__InBUS,
                          real_T *Out){
	%assign dTypeId = LibBlockInputSignalDataTypeId(0)
    %<SLibAssignSLStructToUserStruct(dTypeId, "(*(Aceleracao*) __InBUS)", "(char *)In", 0)>
	main_Outputs_wrapper((Aceleracao *) __InBUS,
                          Out);
}

   %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs
    
  extern void main_Outputs_wrapper(const Aceleracao *In,
                          real_T *Out);
  %closefile externs
  %<LibCacheExtern(externs)>

 %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function"
    %assign u0BUS_ptr = LibBlockDWorkAddr(u0BUS, "", "", 0)
	main_Outputs_wrapper_accel(%<pu0>, %<u0BUS_ptr>, %<py0> );
  %else
	main_Outputs_wrapper(%<pu0>, %<py0> );
  %endif
  %%
%endfunction


%% [EOF] main.tlc





