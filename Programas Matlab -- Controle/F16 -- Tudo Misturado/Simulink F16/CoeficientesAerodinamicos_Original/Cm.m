function CoeficientePitching = Cm (alpha, elevator)
% Pitching moments Coeff - OK.



A = [.205, .168, .186, .196, .213, .251, .245, .238, .252, .231, .198, .192;
      .081, .077, .107, .110, .110, .141, .127, .119, .133, .108, .081, .093;
      -.046, -.020, -.009, -.005, -.006, .010, .006, -.001, .014, .000, -.013, .032;
      -.174, -.145, -.121, -.127, -.129, -.102, -.097, -.113, -.087, -.084, -.069, -.006;
      -.259, -.202, -.184, -.193, -.199, -.150, -.160, -.167, -.104, -.076, -.041, -.005;];




% A = [  0.205   0.168   0.186   0.196   0.213   0.251   0.245   0.238   0.252   0.231   0.198   0.192;
%        0.081   0.077   0.107   0.110   0.110   0.141   0.127   0.119   0.133   0.108   0.081   0.093;
%       -0.046  -0.020  -0.009  -0.005  -0.006   0.010   0.006  -0.001   0.014   0.000  -0.013   0.032;
%       -0.174  -0.145  -0.121  -0.127  -0.129  -0.102  -0.097  -0.113  -0.087  -0.084  -0.069  -0.006;
%       -0.259  -0.202  -0.184  -0.193  -0.199  -0.150  -0.160  -0.167  -0.104  -0.076  -0.041  -0.005;];
  
S = 0.2*alpha;                   
K = fix(S);
% K = round(S);

if(K <= -2)
    K = -1;
end
if(K >= 9)
    K = 8;
end

DA = S - K;
% L = K + fix(sign(DA)*1.1);              % L = K + int(sign(1,1DA)).
L = K + round(sign(DA)*1.1);              % L = K + int(sign(1,1DA)).

S = (elevator/12.0);
M = fix(S);
% M = round(S);

if(M <= -2)
    M = -1;
end
if(M >= 2)
    M = 1;
end

DE = S - M;
% N = M + fix(sign(DE)*1.1);              % L = K + int(sign(1,1DA)).
N = M + round(sign(DE)*1.1);              % L = K + int(sign(1,1DA)).

% -------------------------------------------------------------------------
% Compensação de colunas e linhas.
K = K + 3;
M = M + 3;
L = L + 3;
N = N + 3;
% -------------------------------------------------------------------------

% T = A(K, M);
% U = A(K, N);
% V = T + abs(DA)*(A(L, M) - T);
% W = U + abs(DA)*(A(L, N) - U);

T = A(M, K);
U = A(N, K);
V = T + abs(DA)*(A(M, L) - T);
W = U + abs(DA)*(A(N, L) - U);


CoeficientePitching = V + (W - V)*abs(DE);  
  
  
end