function CoeficienteRollingMomentAileron = Clda (alpha, beta)
% Rolling Moment Due To Ailerons - OK.
% Clda.

A = [ -0.041  -0.052  -0.053  -0.056  -0.050  -0.056  -0.082  -0.059  -0.042  -0.038  -0.027  -0.017;
      -0.041  -0.053  -0.053  -0.053  -0.050  -0.051  -0.066  -0.043  -0.038  -0.027  -0.023  -0.016;
      -0.042  -0.053  -0.052  -0.051  -0.049  -0.049  -0.043  -0.035  -0.026  -0.016  -0.018  -0.014;
      -0.040  -0.052  -0.051  -0.052  -0.048  -0.048  -0.042  -0.037  -0.031  -0.026  -0.017  -0.012;
      -0.043  -0.049  -0.048  -0.049  -0.043  -0.042  -0.042  -0.036  -0.025  -0.021  -0.016  -0.011;
      -0.044  -0.048  -0.048  -0.047  -0.042  -0.041  -0.020  -0.028  -0.013  -0.014  -0.011  -0.010;
      -0.043  -0.049  -0.047  -0.045  -0.042  -0.037  -0.003  -0.013  -0.010  -0.003  -0.007  -0.008];

S = 0.2*alpha;
K = fix(S);
% K = floor(S);
if(K <= -2)
    K = -1;
end
if(K >= 9)
    K = 8;
end
DA = S - K;                 % DA = S - float(K).
L = K + fix(1.1*sign(DA));

S = 0.1*beta;
M = fix(S);
% M = floor(S);
if(M == -3)
    M = -2;
end
if(M >= 3)
    M = 2;
end

DB = S - M;
N = M + fix(1.1*sign(DB));


% -------------------------------------------------------------------------
% Compensacao por software
K = K + 3;
L = L + 3;
M = M + 4;
N = N + 4;
% -------------------------------------------------------------------------

% T = A(K, M);
% U = A(K, N);
% V = T + abs(DA)*(A(L, M) - T);
% W = U + abs(DA)*(A(L, N) - U);

T = A(M, K);
U = A(N, K);
V = T + abs(DA)*(A(M, L) - T);
W = U + abs(DA)*(A(N, L) - U);


CoeficienteRollingMomentAileron = V + (W-V)*abs(DB);

end