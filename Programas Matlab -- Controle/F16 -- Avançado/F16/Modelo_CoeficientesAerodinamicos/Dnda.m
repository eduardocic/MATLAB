function CoeficienteYawingMomentAileron = Dnda(alpha, beta)
% Yawing moment due to Aileron - OK.

A = [ 0.001  -0.027  -0.017  -0.013  -0.012  -0.016   0.001   0.017   0.011  0.017   0.008  0.016;
      0.002  -0.014  -0.016  -0.016  -0.014  -0.019  -0.021   0.002   0.012  0.015   0.015  0.011;
     -0.006  -0.008  -0.006  -0.006  -0.005  -0.008  -0.005   0.007   0.004  0.007   0.006  0.006;
     -0.011  -0.011  -0.010  -0.009  -0.008  -0.006   0.000   0.004   0.007  0.010   0.004  0.010;
     -0.015  -0.015  -0.014  -0.012  -0.011  -0.008  -0.002   0.002   0.006  0.012   0.011  0.011;
     -0.024  -0.010  -0.004  -0.002  -0.001   0.003   0.014   0.006  -0.001  0.004   0.004  0.006;
     -0.022   0.002  -0.003  -0.005  -0.003  -0.001  -0.009  -0.009  -0.001  0.003  -0.002  0.001;];
 
 
S = 0.2*alpha;
K = fix(S);
if(K <= -2)
    K = -1;
end
if(K >= 9)
    K = 8;
end
DA = S - K;                 % DA = S - float(K).
L = K + fix(1.1*sign(DA));

S = 0.1*beta;
M = fix(S);
if(M == -3)
    M = -2;
end
if(M >= 3)
    M = 2;
end

DB = S - M;
N = M + fix(1.1*sign(DB));


% -------------------------------------------------------------------------
% Compensacao por software
K = K + 3;
L = L + 3;
M = M + 4;
N = N + 4;
% -------------------------------------------------------------------------

% T = A(K, M);
% U = A(K, N);
% V = T + abs(DA)*(A(L, M) - T);
% W = U + abs(DA)*(A(L, N) - U);

T = A(M, K);
U = A(N, K);
V = T + abs(DA)*(A(M, L) - T);
W = U + abs(DA)*(A(N, L) - U);


CoeficienteYawingMomentAileron = V + (W-V)*abs(DB);

end